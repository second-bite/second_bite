// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


/**
 * Consumer-Specific // TODO: Integrate extra fields back in
 */
model Consumer {
  consumer_id         Int                     @id @unique @default(autoincrement())
  username            String                  @unique
  // email               String                  @unique 
  password            String                  
  address             Address?                @relation("consumer_address")
  // past_restaurants    PastRestaurants[]
  // pinned_restaurants  PinnedRestaurants[]
  // friends             Consumer[]              @relation("friends")
  // friends_relation    Consumer[]              @relation("friends")
}

// TODO: Integrate this model back in
// model PastRestaurants {
//   consumer_id         Int 
//   consumer            Consumer                @relation(fields: [consumer_id], references: [consumer_id])
//   restaurant_id       Int
//   restaurant          Restaurant              @relation(fields: [restaurant_id], references: [restauraunt_id])
//   assigned_at         DateTime                @default(now())

//   @@id([consumer_id, restaurant_id])
// }

// model PinnedRestaurants {
//   consumer_id         Int 
//   consumer            Consumer                @relation(fields: [consumer_id], references: [consumer_id])
//   restaurant_id       Int
//   restaurant          Restaurant              @relation(fields: [restaurant_id], references: [restauraunt_id])
//   assigned_at         DateTime                @default(now())

//   @@id([consumer_id, restaurant_id])
// }



/**
 * Owner-Specific // TODO: Integrate extra fields back in
 */
model Owner {
  owner_id            Int                     @id @default(autoincrement())
  username            String                  @unique
  // email               String                  @unique 
  password            String
  address             Address?                @relation("owner_address")
  restaurants         Restaurant[]
}


/**
 * Restaurant-Specific
 */
enum Categories {
  asian
  bakery
  barfood
  bbq
  breakfast
  burgers
  cafe
  chinese
  desserts
  fastfood
  french
  greek
  healthy
  indian
  italian
  japanese
  korean
  latinamerican
  mediterranean
  mexican
  middleeastern
  pizza
  salads
  sandwiches
  seafood
  sushi
  thai
  vegan
  vegetarian
  vietnamese
}

model Rating {
  rating_id         Int                       @id @default(autoincrement())
  num_stars         Int
  msg               String?
  consumer_id       Int
  create_date       DateTime                  @default(now())
  restaurant_id     Int  
  restaurant        Restaurant                @relation(fields: [restaurant_id], references:[restaurant_id])
}

model Restaurant {
  restaurant_id    Int                      @id @default(autoincrement())
  name              String
  descr             String
  address           Address?                @relation("restaurant_address")
  categories        Categories[]
  img_url           String
  img_alt           String
  avg_cost          Decimal                 // Avg cost of the surplus (not typical prices)
  ratings           Rating[]
  pickup_time       String[]                // Each entry represents a day of the week (Mon-Su)
  owner_id          Int
  owner             Owner                   @relation(fields: [owner_id], references: [owner_id])
  // pinned_by_users   PinnedRestaurants[]
  // visited_by_users  PastRestaurants[]

  // Analytics
  // page_visits       Int                     @default(0)
  // revenue           Decimal                 @default(0)
  // num_orders        Int                     @default(0)
}



/**
 * Other // TODO: Integrate extra fields back in
 */
model Address {
  // Core Address Info
  street_address    String                      // Street # + Street Name
  city              String
  state             String
  postal_code       String                      // String to preserve leading 0s
  country           String

  address_id        Int                         @id @default(autoincrement())
  consumer_id       Int?                        @unique
  consumer          Consumer?                   @relation("consumer_address", fields:[consumer_id], references: [consumer_id])
  owner_id          Int?                        @unique
  owner             Owner?                      @relation("owner_address", fields:[owner_id], references: [owner_id])
  restaurant_id     Int?                        @unique
  restaurant        Restaurant?                 @relation("restaurant_address", fields:[restaurant_id], references: [restaurant_id])
}

// TODO: Integrate this model back in
// model Feedback {
//   feedback_id       Int                           @id @default(autoincrement())
//   num_stars         Int
//   msg               String
//   user_id           Int
//   create_date       DateTime                      @default(now())
// }

enum ErrorSource {
  frontend
  backend
}

model ErrorLog {
  error_id          Int                         @id @default(autoincrement())
  message           String                      
  status            Int                         @default(500)
  error_source      ErrorSource                 // Whether the error occurred on the frontend or backend
  created_at        DateTime                    @default(now())
  route             String?                     // If backend error, outlines which route the error occurred in
}
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


/**
 * Consumer-Specific
 */
model Consumer {
  consumer_id               Int                     @id @unique @default(autoincrement())
  username                  String                  @unique
  password                  String                  
  address                   Address?                @relation("consumer_address")
  orders                     Order[]                @relation("orders_consumer")
  reserved_restaurant_id    Int?                    // Restaurant ID of currently reserved restaurant
  reservation_expiration    DateTime?               // Expiration of current reservation                           
  friendships_a             Friendship[]            @relation("friendship_a")
  friendships_b             Friendship[]            @relation("friendship_b")
  sent_friend_requests      FriendRequest[]         @relation("sender")
  received_friend_requests  FriendRequest[]         @relation("receiver")
  restaurant_visits         PageVisit[]             @relation("visits_consumer")
}

model Friendship {
  friendship_id       Int                     @id @unique @default(autoincrement())
  consumer_id_a       Int
  friend_a            Consumer                @relation("friendship_a", fields: [consumer_id_a], references: [consumer_id])
  consumer_id_b       Int
  friend_b            Consumer                @relation("friendship_b", fields: [consumer_id_b], references: [consumer_id])
  created_at          DateTime                @default(now())

  @@unique([consumer_id_a, consumer_id_b]) 
}

model FriendRequest {
  friend_request_id       Int                     @id @unique @default(autoincrement())
  sender_consumer_id      Int
  sender_consumer         Consumer                @relation("sender", fields: [sender_consumer_id], references: [consumer_id])
  receiver_consumer_id    Int
  receiver_consumer       Consumer                @relation("receiver", fields: [receiver_consumer_id], references: [consumer_id])
  created_at              DateTime                @default(now())

  @@unique([sender_consumer_id, receiver_consumer_id])
}

/**
 * Owner-Specific
 */
model Owner {
  owner_id            Int                     @id @default(autoincrement())
  username            String                  @unique
  password            String
  address             Address?                @relation("owner_address")
  restaurants         Restaurant[]
}


/**
 * Restaurant-Specific
 */
enum Categories {
  asian
  bakery
  barfood
  bbq
  breakfast
  burgers
  cafe
  chinese
  desserts
  fastfood
  french
  greek
  healthy
  indian
  italian
  japanese
  korean
  latinamerican
  mediterranean
  mexican
  middleeastern
  pizza
  salads
  sandwiches
  seafood
  sushi
  thai
  vegan
  vegetarian
  vietnamese
}

model Rating {
  rating_id         Int                       @id @default(autoincrement())
  num_stars         Int
  msg               String?
  consumer_id       Int
  create_date       DateTime                  @default(now())
  restaurant_id     Int  
  restaurant        Restaurant                @relation(fields: [restaurant_id], references:[restaurant_id])
}

model Restaurant {
  restaurant_id     Int                      @id @default(autoincrement())
  name              String
  descr             String
  address           Address?                @relation("restaurant_address")
  categories        Categories[]
  img_url           String
  img_alt           String
  avg_cost          Decimal                 // Avg cost of the surplus (not typical prices)
  ratings           Rating[]
  pickup_time       String[]                // Each entry represents a day of the week (Mon-Su)
  time_zone         String                  @default("America/Los_Angeles")
  orders            Order[]                 @relation("orders_restaurant")
  page_visits       PageVisit[]             @relation("visits_restaurant")
  owner_id          Int
  owner             Owner                   @relation(fields: [owner_id], references: [owner_id])
}

/* Analytics */
enum Weekday {
  mon
  tue
  wed
  thu
  fri
  sat
  sun
}

// Orders
model Order {
  order_id              Int                     @id @default(autoincrement())
  cost                  Decimal
  is_first_order        Boolean
  order_time            DateTime                @default(now())
  restaurant_id         Int
  restaurant            Restaurant              @relation("orders_restaurant", fields: [restaurant_id], references: [restaurant_id])
  consumer_id           Int                     
  consumer              Consumer                @relation("orders_consumer", fields: [consumer_id], references: [consumer_id])
}

// Restaurant Site Visits
model PageVisit {
  visit_id              Int                     @id @default(autoincrement())
  is_first_visit        Boolean
  visit_time            DateTime                @default(now())
  restaurant_id         Int
  restaurant            Restaurant              @relation("visits_restaurant", fields: [restaurant_id], references: [restaurant_id])
  consumer_id           Int                     
  consumer              Consumer                @relation("visits_consumer", fields: [consumer_id], references: [consumer_id])
}

/**
 * Other
 */
model Address {
  // Core Address Info
  street_address    String                      // Street # + Street Name
  city              String
  state             String
  postal_code       String                      // String to preserve leading 0s
  country           String
  address_id        Int                         @id @default(autoincrement())
  consumer_id       Int?                        @unique
  consumer          Consumer?                   @relation("consumer_address", fields:[consumer_id], references: [consumer_id])
  owner_id          Int?                        @unique
  owner             Owner?                      @relation("owner_address", fields:[owner_id], references: [owner_id])
  restaurant_id     Int?                        @unique
  restaurant        Restaurant?                 @relation("restaurant_address", fields:[restaurant_id], references: [restaurant_id])
}

enum ErrorSource {
  frontend
  backend
}

model ErrorLog {
  error_id          Int                         @id @default(autoincrement())
  message           String                      
  status            Int                         @default(500)
  error_source      ErrorSource                 // Whether the error occurred on the frontend or backend
  created_at        DateTime                    @default(now())
  route             String?                     // If backend error, outlines which route the error occurred in
}